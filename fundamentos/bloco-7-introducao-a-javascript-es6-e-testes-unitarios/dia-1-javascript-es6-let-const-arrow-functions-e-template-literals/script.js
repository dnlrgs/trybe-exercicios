//PARTE I

// üöÄ Altere as vari√°veis para respeitarem o escopo em que foram declaradas.
// Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function;
// Modifique as vari√°veis para que respeitem o escopo onde est√£o declaradas;
// Modifique as concatena√ß√µes para template literals.

      function testingScope(escopo) {
        if (escopo === true) {
          let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
          ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
          console.log(ifScope);
        } else {
          const elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
          console.log(elseScope);
        }
        // console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necess√°rio esta linha pode ser removida.
      }

      testingScope(true);

//üöÄ Crie uma fun√ß√£o que retorne um array em ordem crescente.

const oddsAndEvens = [13, 3, 4, 10, 7, 2];

// Seu c√≥digo aqui.
const rearenge = (array) => {
  array.sort((a, b) => a - b)
  return `Os n√∫meros ${array} se encontram ordenados de forma crescente!`
}

console.log(rearenge(oddsAndEvens)); // ser√° necess√°rio alterar essa linha üòâ

// Crie uma fun√ß√£o que fa√ßa com que o array oddsAndEvens fique na ordem crescente;
// Utilize o console.log e template literals para retornar a frase: 'Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!'.
// Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne a frase "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort(). Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.

//PARTE II


// Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.
// Na matem√°tica, o fatorial de um n√∫mero inteiro e positivo N, representado por N!, √© o produto de todos os seus antecessores at√© o n√∫mero um. Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio de forma recursiva. Spoiler: √â poss√≠vel resolver com uma linha usando ternary operator.

const fatorial = (num) => {
  let resultado = 1
  if (num === 0) {
    resultado = 1
  }
  for (let index = 1; index <= num; index += 1) {
    resultado = resultado * index
  }
  return resultado
}

console.log(fatorial(0));